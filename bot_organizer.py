import datetime
import os
from aiogram.types import KeyboardButton, ReplyKeyboardMarkup
from asgiref.sync import sync_to_async
import textwrap
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import StatesGroup, State
from environs import Env
from aiogram import Bot, Dispatcher, executor, types
from keybutton import start_button, add_speaker_buttons, change_the_program_button, view_donations_button, \
    inform_everyone_button
import django

os.environ['DJANGO_SETTINGS_MODULE'] = 'storage.settings'
django.setup()

from db.models import User, Donation, Event, Alert

env = Env()
env.read_env()

bot = Bot(env('TG_ORGANIZER_BOT_TOKEN'))
dp = Dispatcher(bot, storage=MemoryStorage())

MY_EVENT: Event = None


@sync_to_async
def get_message_donats(user) -> str:
    donat = Donation.objects.filter(user__event=user)
    message = ['{} {}—Ä—É–±.'.format(str(result.user.username), str(result.summ)) for result in donat]
    return textwrap.dedent("\n".join(message))


class StateUser(StatesGroup):
    speakers = State()
    programs = State()
    programs_name = State()
    programs_date = State()
    start = State()
    inform = State()


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    async for event in Event.objects.all():
        markup.add(KeyboardButton(event.title))
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ', reply_markup=markup)
    await StateUser.start.set()


@dp.message_handler(state=StateUser.start)
async def choose_event(message: types.Message, state: FSMContext):
    global MY_EVENT
    try:
        MY_EVENT = await Event.objects.aget(title=message.text)
    except Event.DoesNotExist:
        await message.answer(f'{message.text} –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è')
    await state.finish()
    await message.answer(f'–í–∞—à–µ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <<{MY_EVENT.title}>>', reply_markup=start_button())


@dp.message_handler(Text(equals='–î–æ–±–∞–≤–∏—Ç—å –¥–æ–∫–ª–∞–¥—á–∏–∫–æ–≤'))
async def add_speakers(message: types.Message):
    await StateUser.speakers.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º—ã "@nik @nik @nik" —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª', reply_markup=add_speaker_buttons())


@dp.message_handler(Text(equals='–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ'))
async def choose_other_event(message: types.Message):
    await start(message)


@dp.message_handler(Text(equals='–ü—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É'))
async def change_the_program(message: types.Message):
    await StateUser.programs.set()
    await message.answer('–ß—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å?', reply_markup=change_the_program_button())


@dp.message_handler(Text(equals='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–Ω–∞—Ç—ã'))
async def view_donations(message: types.Message):
    donats = await get_message_donats(MY_EVENT)
    await message.answer(donats, reply_markup=view_donations_button())


@dp.message_handler(Text(equals='–£–≤–µ–¥–æ–º–∏—Ç—å –≤—Å–µ—Ö'))
async def inform_everyone(message: types.Message):
    await StateUser.inform.set()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è?', reply_markup=inform_everyone_button())


@dp.message_handler(state=StateUser.speakers)
async def write_speaker(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start_button())
    else:
        new_message = message.text.replace('@', '')
        add_speakers = ''
        try:
            for username in new_message.split(' '):
                user = await MY_EVENT.users.aget(username=username)
                await MY_EVENT.speeches.aget_or_create(
                    speaker=user,
                    event=MY_EVENT,
                    start_time=datetime.datetime.now(),
                    end_time=datetime.datetime.now() + datetime.timedelta(hours=2)
                )
                add_speakers += '@{} '.format(username)
        except User.DoesNotExist:
            await message.answer(textwrap.dedent(f'''
            –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–∏–∫–æ–º @{username}
            –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –Ω–∞ {MY_EVENT.title.upper()} –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏'''))

        await bot.send_message(chat_id=env('ID_CHAT_CHANEL'), text=textwrap.dedent(f'''
        ‚ùï‚ùï‚ùï–í—Å—Ç—Ä–µ—á–∞–µ–º –ù–æ–≤—ã—Ö –°–ø–∏–∫–µ—Ä–æ–≤‚ùï‚ùï‚ùï
        üëèüëèüëèüëè{add_speakers}üëèüëèüëèüëè'''))
        await message.answer(f'{add_speakers} –¥–æ–±–∞–≤–ª–µ–Ω—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã', reply_markup=add_speaker_buttons())


@dp.message_handler(state=StateUser.inform)
async def send_chanel_message(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start_button())
    else:
        await state.finish()
        await Alert.objects.acreate(
            text=textwrap.dedent(
                f'''
                #‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è–í–ê–ñ–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è
                #{message.text.upper()}
                '''
            )
        )
        #await bot.send_message(chat_id=env('ID_CHAT_CHANEL'), text=textwrap.dedent(f'''
        #‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è–í–ê–ñ–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è
        #{message.text.upper()}'''))
        await message.answer('–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', reply_markup=inform_everyone_button())


@dp.message_handler(state=StateUser.programs)
async def success_change_program(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start_button())
    elif message.text == '–ù–∞–∑–≤–∞–Ω–∏–µ':
        await StateUser.programs_name.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')
    elif message.text == '–î–∞—Ç–∞':
        await StateUser.programs_date.set()
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD')
    else:
        await state.finish()
        await message.answer('–°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–≥—Ä–∞–º–º—É')


@dp.message_handler(state=StateUser.programs_name)
async def change_name_program(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start_button())
    else:
        MY_EVENT.title = message.text
        await MY_EVENT.asave(update_fields=['title'])
        await StateUser.programs.set()
        await message.answer(textwrap.dedent(f'''
        –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {MY_EVENT.title}
        –•–æ—Ç–∏—Ç–µ –µ—â—ë –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è?'''), reply_markup=change_the_program_button())


@dp.message_handler(state=StateUser.programs_date)
async def change_data_program(message: types.Message, state: FSMContext):
    if message.text == '–ù–∞–∑–∞–¥':
        await state.finish()
        await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start_button())
    else:
        MY_EVENT.date = message.text
        await MY_EVENT.asave(update_fields=['date'])
        await message.answer(textwrap.dedent(f'''
        –ù–æ–≤–∞—è –¥–∞—Ç–∞: {MY_EVENT.date}
        –•–æ—Ç–∏—Ç–µ –µ—â—ë –≤–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è?'''), reply_markup=change_the_program_button())
        await StateUser.programs.set()


@dp.message_handler(Text(equals='–ù–∞–∑–∞–¥'))
async def back(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=start_button())


executor.start_polling(dp)
